"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.test = test;

var _aureoomsJsSort = require("@aureooms/js-sort");

var _aureoomsJsSort2 = _interopRequireDefault(_aureoomsJsSort);

var _aureoomsJsArray = require("@aureooms/js-array");

var _aureoomsJsArray2 = _interopRequireDefault(_aureoomsJsArray);

var _aureoomsJsRandom = require("@aureooms/js-random");

var _aureoomsJsRandom2 = _interopRequireDefault(_aureoomsJsRandom);

var _aureoomsJsCompare = require("@aureooms/js-compare");

var _aureoomsJsCompare2 = _interopRequireDefault(_aureoomsJsCompare);

var _aureoomsJsItertools = require("@aureooms/js-itertools");

var itertools = _interopRequireWildcard(_aureoomsJsItertools);

var _aureoomsJsFunctools = require("@aureooms/js-functools");

var _aureoomsJsFunctools2 = _interopRequireDefault(_aureoomsJsFunctools);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function check(_test, sortname, method, ctor, n, comparename, compare) {

	var title = sortname + " (new " + ctor.name + "(" + n + "), " + comparename + ")";

	_test(title, function (t) {

		// SETUP ARRAY
		var a = new ctor(n);
		_aureoomsJsArray2.default.iota(a, 0, n, 0);

		// SORT ARRAY
		_aureoomsJsRandom2.default.shuffle(a, 0, n);
		method(compare, a, 0, n);

		// TEST PREDICATE
		t.is(_aureoomsJsSort2.default.issorted(compare, a, 0, n), n, "check sorted");
		t.is(a.length, n, "check length a");
	});
}

function test(_test, algorithms) {

	itertools.exhaust(itertools.map(function (args) {

		_aureoomsJsFunctools2.default.star(function (sortname, sort, comparename, compare, size, type) {

			if (type.BYTES_PER_ELEMENT && size > Math.pow(2, type.BYTES_PER_ELEMENT * 8)) {
				return;
			}

			check(_test, sortname, sort, type, size, comparename, compare);
		}, itertools.list(itertools.chain(args)));
	}, itertools.product([algorithms, [["increasing", _aureoomsJsCompare2.default.increasing], ["decreasing", _aureoomsJsCompare2.default.decreasing]], [[0], [1], [2], [10], [63], [64], [65]], [[Array], [Int8Array], [Uint8Array], [Int16Array], [Uint16Array], [Int32Array], [Uint32Array], [Float32Array], [Float64Array]]], 1)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0LmpzIl0sIm5hbWVzIjpbInRlc3QiLCJpdGVydG9vbHMiLCJjaGVjayIsIl90ZXN0Iiwic29ydG5hbWUiLCJtZXRob2QiLCJjdG9yIiwibiIsImNvbXBhcmVuYW1lIiwiY29tcGFyZSIsInRpdGxlIiwibmFtZSIsImEiLCJpb3RhIiwic2h1ZmZsZSIsInQiLCJpcyIsImlzc29ydGVkIiwibGVuZ3RoIiwiYWxnb3JpdGhtcyIsImV4aGF1c3QiLCJtYXAiLCJhcmdzIiwic3RhciIsInNvcnQiLCJzaXplIiwidHlwZSIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiTWF0aCIsInBvdyIsImxpc3QiLCJjaGFpbiIsInByb2R1Y3QiLCJpbmNyZWFzaW5nIiwiZGVjcmVhc2luZyIsIkFycmF5IiwiSW50OEFycmF5IiwiVWludDhBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUE4QmdCQSxJLEdBQUFBLEk7O0FBN0JoQjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztJQUFZQyxTOztBQUNaOzs7Ozs7OztBQUVBLFNBQVNDLEtBQVQsQ0FBaUJDLEtBQWpCLEVBQXlCQyxRQUF6QixFQUFvQ0MsTUFBcEMsRUFBNkNDLElBQTdDLEVBQW9EQyxDQUFwRCxFQUF3REMsV0FBeEQsRUFBc0VDLE9BQXRFLEVBQWdGOztBQUUvRSxLQUFNQyxRQUFXTixRQUFYLGNBQTRCRSxLQUFLSyxJQUFqQyxTQUF5Q0osQ0FBekMsV0FBZ0RDLFdBQWhELE1BQU47O0FBRUFMLE9BQU9PLEtBQVAsRUFBYyxhQUFLOztBQUVsQjtBQUNBLE1BQU1FLElBQUksSUFBSU4sSUFBSixDQUFTQyxDQUFULENBQVY7QUFDQSw0QkFBTU0sSUFBTixDQUFZRCxDQUFaLEVBQWUsQ0FBZixFQUFrQkwsQ0FBbEIsRUFBcUIsQ0FBckI7O0FBRUE7QUFDQSw2QkFBT08sT0FBUCxDQUFnQkYsQ0FBaEIsRUFBbUIsQ0FBbkIsRUFBc0JMLENBQXRCO0FBQ0FGLFNBQVFJLE9BQVIsRUFBaUJHLENBQWpCLEVBQW9CLENBQXBCLEVBQXVCTCxDQUF2Qjs7QUFFQTtBQUNBUSxJQUFFQyxFQUFGLENBQU0seUJBQUtDLFFBQUwsQ0FBZVIsT0FBZixFQUF5QkcsQ0FBekIsRUFBNkIsQ0FBN0IsRUFBaUNMLENBQWpDLENBQU4sRUFBNkNBLENBQTdDLEVBQWlELGNBQWpEO0FBQ0FRLElBQUVDLEVBQUYsQ0FBTUosRUFBRU0sTUFBUixFQUFnQlgsQ0FBaEIsRUFBbUIsZ0JBQW5CO0FBRUEsRUFkRDtBQWdCQTs7QUFFTSxTQUFTUCxJQUFULENBQWdCRyxLQUFoQixFQUF3QmdCLFVBQXhCLEVBQXFDOztBQUU1Q2xCLFdBQVVtQixPQUFWLENBQW1CbkIsVUFBVW9CLEdBQVYsQ0FDbkIsVUFBV0MsSUFBWCxFQUFrQjs7QUFFakIsZ0NBQVVDLElBQVYsQ0FBZ0IsVUFBV25CLFFBQVgsRUFBcUJvQixJQUFyQixFQUEyQmhCLFdBQTNCLEVBQXdDQyxPQUF4QyxFQUFpRGdCLElBQWpELEVBQXVEQyxJQUF2RCxFQUE4RDs7QUFFN0UsT0FBS0EsS0FBS0MsaUJBQUwsSUFBMEJGLE9BQU9HLEtBQUtDLEdBQUwsQ0FBVSxDQUFWLEVBQWFILEtBQUtDLGlCQUFMLEdBQXlCLENBQXRDLENBQXRDLEVBQWtGO0FBQ2pGO0FBQ0E7O0FBRUR6QixTQUFPQyxLQUFQLEVBQWVDLFFBQWYsRUFBeUJvQixJQUF6QixFQUErQkUsSUFBL0IsRUFBcUNELElBQXJDLEVBQTJDakIsV0FBM0MsRUFBd0RDLE9BQXhEO0FBRUEsR0FSRCxFQVFHUixVQUFVNkIsSUFBVixDQUFnQjdCLFVBQVU4QixLQUFWLENBQWlCVCxJQUFqQixDQUFoQixDQVJIO0FBVUEsRUFia0IsRUFpQm5CckIsVUFBVStCLE9BQVYsQ0FBbUIsQ0FBRWIsVUFBRixFQUVuQixDQUNDLENBQUUsWUFBRixFQUFnQiw0QkFBUWMsVUFBeEIsQ0FERCxFQUVDLENBQUUsWUFBRixFQUFnQiw0QkFBUUMsVUFBeEIsQ0FGRCxDQUZtQixFQU9uQixDQUFDLENBQUMsQ0FBRCxDQUFELEVBQU0sQ0FBQyxDQUFELENBQU4sRUFBVyxDQUFDLENBQUQsQ0FBWCxFQUFnQixDQUFDLEVBQUQsQ0FBaEIsRUFBc0IsQ0FBQyxFQUFELENBQXRCLEVBQTRCLENBQUMsRUFBRCxDQUE1QixFQUFrQyxDQUFDLEVBQUQsQ0FBbEMsQ0FQbUIsRUFTbkIsQ0FDQyxDQUFFQyxLQUFGLENBREQsRUFFQyxDQUFFQyxTQUFGLENBRkQsRUFHQyxDQUFFQyxVQUFGLENBSEQsRUFJQyxDQUFFQyxVQUFGLENBSkQsRUFLQyxDQUFFQyxXQUFGLENBTEQsRUFNQyxDQUFFQyxVQUFGLENBTkQsRUFPQyxDQUFFQyxXQUFGLENBUEQsRUFRQyxDQUFFQyxZQUFGLENBUkQsRUFTQyxDQUFFQyxZQUFGLENBVEQsQ0FUbUIsQ0FBbkIsRUFxQkcsQ0FyQkgsQ0FqQm1CLENBQW5CO0FBd0NDLENBQUMiLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHNvcnQgZnJvbSBcImF1cmVvb21zLWpzLXNvcnRcIiA7XG5pbXBvcnQgYXJyYXkgZnJvbSBcImF1cmVvb21zLWpzLWFycmF5XCIgO1xuaW1wb3J0IHJhbmRvbSBmcm9tIFwiYXVyZW9vbXMtanMtcmFuZG9tXCIgO1xuaW1wb3J0IGNvbXBhcmUgZnJvbSBcImF1cmVvb21zLWpzLWNvbXBhcmVcIiA7XG5pbXBvcnQgKiBhcyBpdGVydG9vbHMgZnJvbSBcImF1cmVvb21zLWpzLWl0ZXJ0b29sc1wiIDtcbmltcG9ydCBmdW5jdG9vbHMgZnJvbSBcImF1cmVvb21zLWpzLWZ1bmN0b29sc1wiIDtcblxuZnVuY3Rpb24gY2hlY2sgKCBfdGVzdCAsIHNvcnRuYW1lICwgbWV0aG9kICwgY3RvciAsIG4gLCBjb21wYXJlbmFtZSAsIGNvbXBhcmUgKSB7XG5cblx0Y29uc3QgdGl0bGUgPSBgJHtzb3J0bmFtZX0gKG5ldyAke2N0b3IubmFtZX0oJHtufSksICR7Y29tcGFyZW5hbWV9KWAgO1xuXG5cdF90ZXN0KCB0aXRsZSwgdCA9PiB7XG5cblx0XHQvLyBTRVRVUCBBUlJBWVxuXHRcdGNvbnN0IGEgPSBuZXcgY3RvcihuKTtcblx0XHRhcnJheS5pb3RhKCBhLCAwLCBuLCAwICk7XG5cblx0XHQvLyBTT1JUIEFSUkFZXG5cdFx0cmFuZG9tLnNodWZmbGUoIGEsIDAsIG4gKTtcblx0XHRtZXRob2QoIGNvbXBhcmUsIGEsIDAsIG4gKTtcblxuXHRcdC8vIFRFU1QgUFJFRElDQVRFXG5cdFx0dC5pcyggc29ydC5pc3NvcnRlZCggY29tcGFyZSAsIGEgLCAwICwgbiApICwgbiAsIFwiY2hlY2sgc29ydGVkXCIgKSA7XG5cdFx0dC5pcyggYS5sZW5ndGgsIG4sIFwiY2hlY2sgbGVuZ3RoIGFcIiApO1xuXG5cdH0gKTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVzdCAoIF90ZXN0ICwgYWxnb3JpdGhtcyApIHtcblxuaXRlcnRvb2xzLmV4aGF1c3QoIGl0ZXJ0b29scy5tYXAoXG5mdW5jdGlvbiAoIGFyZ3MgKSB7XG5cblx0ZnVuY3Rvb2xzLnN0YXIoIGZ1bmN0aW9uICggc29ydG5hbWUsIHNvcnQsIGNvbXBhcmVuYW1lLCBjb21wYXJlLCBzaXplLCB0eXBlICkge1xuXG5cdFx0aWYgKCB0eXBlLkJZVEVTX1BFUl9FTEVNRU5UICYmIHNpemUgPiBNYXRoLnBvdyggMiwgdHlwZS5CWVRFU19QRVJfRUxFTUVOVCAqIDggKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjaGVjayggX3Rlc3QgLCBzb3J0bmFtZSwgc29ydCwgdHlwZSwgc2l6ZSwgY29tcGFyZW5hbWUsIGNvbXBhcmUgKTtcblxuXHR9LCBpdGVydG9vbHMubGlzdCggaXRlcnRvb2xzLmNoYWluKCBhcmdzICkgKSApIDtcblxufSAsXG5cblxuXG5pdGVydG9vbHMucHJvZHVjdCggWyBhbGdvcml0aG1zICxcblxuW1xuXHRbIFwiaW5jcmVhc2luZ1wiLCBjb21wYXJlLmluY3JlYXNpbmcgXSxcblx0WyBcImRlY3JlYXNpbmdcIiwgY29tcGFyZS5kZWNyZWFzaW5nIF1cbl0sXG5cbltbMF0sIFsxXSwgWzJdLCBbMTBdLCBbNjNdLCBbNjRdLCBbNjVdXSxcblxuW1xuXHRbIEFycmF5IF0sXG5cdFsgSW50OEFycmF5IF0sXG5cdFsgVWludDhBcnJheSBdLFxuXHRbIEludDE2QXJyYXkgXSxcblx0WyBVaW50MTZBcnJheSBdLFxuXHRbIEludDMyQXJyYXkgXSxcblx0WyBVaW50MzJBcnJheSBdLFxuXHRbIEZsb2F0MzJBcnJheSBdLFxuXHRbIEZsb2F0NjRBcnJheSBdXG5dXG5cbl0sIDEgKSApICk7XG5cbn0gO1xuXG4iXX0=