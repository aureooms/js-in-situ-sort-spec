"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.test = test;

var _aureoomsJsSort = require("aureooms-js-sort");

var _aureoomsJsSort2 = _interopRequireDefault(_aureoomsJsSort);

var _aureoomsJsArray = require("aureooms-js-array");

var _aureoomsJsArray2 = _interopRequireDefault(_aureoomsJsArray);

var _aureoomsJsRandom = require("aureooms-js-random");

var _aureoomsJsRandom2 = _interopRequireDefault(_aureoomsJsRandom);

var _aureoomsJsCompare = require("aureooms-js-compare");

var _aureoomsJsCompare2 = _interopRequireDefault(_aureoomsJsCompare);

var _aureoomsJsItertools = require("aureooms-js-itertools");

var _aureoomsJsItertools2 = _interopRequireDefault(_aureoomsJsItertools);

var _aureoomsJsFunctools = require("aureooms-js-functools");

var _aureoomsJsFunctools2 = _interopRequireDefault(_aureoomsJsFunctools);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function check(_test, sortname, method, ctor, n, comparename, compare) {

	var title = sortname + " (new " + ctor.name + "(" + n + "), " + comparename + ")";

	_test(title, function (t) {

		// SETUP ARRAY
		var a = new ctor(n);
		_aureoomsJsArray2.default.iota(a, 0, n, 0);

		// SORT ARRAY
		_aureoomsJsRandom2.default.shuffle(a, 0, n);
		method(compare, a, 0, n);

		// TEST PREDICATE
		t.is(_aureoomsJsSort2.default.issorted(compare, a, 0, n), n, "check sorted");
		t.is(a.length, n, "check length a");
	});
}

function test(_test, algorithms) {

	_aureoomsJsItertools2.default.exhaust(_aureoomsJsItertools2.default.map(function (args) {

		_aureoomsJsFunctools2.default.star(function (sortname, sort, comparename, compare, size, type) {

			if (type.BYTES_PER_ELEMENT && size > Math.pow(2, type.BYTES_PER_ELEMENT * 8)) {
				return;
			}

			check(_test, sortname, sort, type, size, comparename, compare);
		}, _aureoomsJsItertools2.default.list(_aureoomsJsItertools2.default.chain(args)));
	}, _aureoomsJsItertools2.default.product([algorithms, [["increasing", _aureoomsJsCompare2.default.increasing], ["decreasing", _aureoomsJsCompare2.default.decreasing]], [[0], [1], [2], [10], [63], [64], [65]], [[Array], [Int8Array], [Uint8Array], [Int16Array], [Uint16Array], [Int32Array], [Uint32Array], [Float32Array], [Float64Array]]], 1)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0LmpzIl0sIm5hbWVzIjpbInRlc3QiLCJjaGVjayIsIl90ZXN0Iiwic29ydG5hbWUiLCJtZXRob2QiLCJjdG9yIiwibiIsImNvbXBhcmVuYW1lIiwiY29tcGFyZSIsInRpdGxlIiwibmFtZSIsImEiLCJpb3RhIiwic2h1ZmZsZSIsInQiLCJpcyIsImlzc29ydGVkIiwibGVuZ3RoIiwiYWxnb3JpdGhtcyIsImV4aGF1c3QiLCJtYXAiLCJhcmdzIiwic3RhciIsInNvcnQiLCJzaXplIiwidHlwZSIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiTWF0aCIsInBvdyIsImxpc3QiLCJjaGFpbiIsInByb2R1Y3QiLCJpbmNyZWFzaW5nIiwiZGVjcmVhc2luZyIsIkFycmF5IiwiSW50OEFycmF5IiwiVWludDhBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUE4QmdCQSxJLEdBQUFBLEk7O0FBN0JoQjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLFNBQVNDLEtBQVQsQ0FBaUJDLEtBQWpCLEVBQXlCQyxRQUF6QixFQUFvQ0MsTUFBcEMsRUFBNkNDLElBQTdDLEVBQW9EQyxDQUFwRCxFQUF3REMsV0FBeEQsRUFBc0VDLE9BQXRFLEVBQWdGOztBQUUvRSxLQUFNQyxRQUFXTixRQUFYLGNBQTRCRSxLQUFLSyxJQUFqQyxTQUF5Q0osQ0FBekMsV0FBZ0RDLFdBQWhELE1BQU47O0FBRUFMLE9BQU9PLEtBQVAsRUFBYyxhQUFLOztBQUVsQjtBQUNBLE1BQU1FLElBQUksSUFBSU4sSUFBSixDQUFTQyxDQUFULENBQVY7QUFDQSw0QkFBTU0sSUFBTixDQUFZRCxDQUFaLEVBQWUsQ0FBZixFQUFrQkwsQ0FBbEIsRUFBcUIsQ0FBckI7O0FBRUE7QUFDQSw2QkFBT08sT0FBUCxDQUFnQkYsQ0FBaEIsRUFBbUIsQ0FBbkIsRUFBc0JMLENBQXRCO0FBQ0FGLFNBQVFJLE9BQVIsRUFBaUJHLENBQWpCLEVBQW9CLENBQXBCLEVBQXVCTCxDQUF2Qjs7QUFFQTtBQUNBUSxJQUFFQyxFQUFGLENBQU0seUJBQUtDLFFBQUwsQ0FBZVIsT0FBZixFQUF5QkcsQ0FBekIsRUFBNkIsQ0FBN0IsRUFBaUNMLENBQWpDLENBQU4sRUFBNkNBLENBQTdDLEVBQWlELGNBQWpEO0FBQ0FRLElBQUVDLEVBQUYsQ0FBTUosRUFBRU0sTUFBUixFQUFnQlgsQ0FBaEIsRUFBbUIsZ0JBQW5CO0FBRUEsRUFkRDtBQWdCQTs7QUFFTSxTQUFTTixJQUFULENBQWdCRSxLQUFoQixFQUF3QmdCLFVBQXhCLEVBQXFDOztBQUU1QywrQkFBVUMsT0FBVixDQUFtQiw4QkFBVUMsR0FBVixDQUNuQixVQUFXQyxJQUFYLEVBQWtCOztBQUVqQixnQ0FBVUMsSUFBVixDQUFnQixVQUFXbkIsUUFBWCxFQUFxQm9CLElBQXJCLEVBQTJCaEIsV0FBM0IsRUFBd0NDLE9BQXhDLEVBQWlEZ0IsSUFBakQsRUFBdURDLElBQXZELEVBQThEOztBQUU3RSxPQUFLQSxLQUFLQyxpQkFBTCxJQUEwQkYsT0FBT0csS0FBS0MsR0FBTCxDQUFVLENBQVYsRUFBYUgsS0FBS0MsaUJBQUwsR0FBeUIsQ0FBdEMsQ0FBdEMsRUFBa0Y7QUFDakY7QUFDQTs7QUFFRHpCLFNBQU9DLEtBQVAsRUFBZUMsUUFBZixFQUF5Qm9CLElBQXpCLEVBQStCRSxJQUEvQixFQUFxQ0QsSUFBckMsRUFBMkNqQixXQUEzQyxFQUF3REMsT0FBeEQ7QUFFQSxHQVJELEVBUUcsOEJBQVVxQixJQUFWLENBQWdCLDhCQUFVQyxLQUFWLENBQWlCVCxJQUFqQixDQUFoQixDQVJIO0FBVUEsRUFia0IsRUFpQm5CLDhCQUFVVSxPQUFWLENBQW1CLENBQUViLFVBQUYsRUFFbkIsQ0FDQyxDQUFFLFlBQUYsRUFBZ0IsNEJBQVFjLFVBQXhCLENBREQsRUFFQyxDQUFFLFlBQUYsRUFBZ0IsNEJBQVFDLFVBQXhCLENBRkQsQ0FGbUIsRUFPbkIsQ0FBQyxDQUFDLENBQUQsQ0FBRCxFQUFNLENBQUMsQ0FBRCxDQUFOLEVBQVcsQ0FBQyxDQUFELENBQVgsRUFBZ0IsQ0FBQyxFQUFELENBQWhCLEVBQXNCLENBQUMsRUFBRCxDQUF0QixFQUE0QixDQUFDLEVBQUQsQ0FBNUIsRUFBa0MsQ0FBQyxFQUFELENBQWxDLENBUG1CLEVBU25CLENBQ0MsQ0FBRUMsS0FBRixDQURELEVBRUMsQ0FBRUMsU0FBRixDQUZELEVBR0MsQ0FBRUMsVUFBRixDQUhELEVBSUMsQ0FBRUMsVUFBRixDQUpELEVBS0MsQ0FBRUMsV0FBRixDQUxELEVBTUMsQ0FBRUMsVUFBRixDQU5ELEVBT0MsQ0FBRUMsV0FBRixDQVBELEVBUUMsQ0FBRUMsWUFBRixDQVJELEVBU0MsQ0FBRUMsWUFBRixDQVRELENBVG1CLENBQW5CLEVBcUJHLENBckJILENBakJtQixDQUFuQjtBQXdDQyxDQUFDIiwiZmlsZSI6InRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBzb3J0IGZyb20gXCJhdXJlb29tcy1qcy1zb3J0XCIgO1xuaW1wb3J0IGFycmF5IGZyb20gXCJhdXJlb29tcy1qcy1hcnJheVwiIDtcbmltcG9ydCByYW5kb20gZnJvbSBcImF1cmVvb21zLWpzLXJhbmRvbVwiIDtcbmltcG9ydCBjb21wYXJlIGZyb20gXCJhdXJlb29tcy1qcy1jb21wYXJlXCIgO1xuaW1wb3J0IGl0ZXJ0b29scyBmcm9tIFwiYXVyZW9vbXMtanMtaXRlcnRvb2xzXCIgO1xuaW1wb3J0IGZ1bmN0b29scyBmcm9tIFwiYXVyZW9vbXMtanMtZnVuY3Rvb2xzXCIgO1xuXG5mdW5jdGlvbiBjaGVjayAoIF90ZXN0ICwgc29ydG5hbWUgLCBtZXRob2QgLCBjdG9yICwgbiAsIGNvbXBhcmVuYW1lICwgY29tcGFyZSApIHtcblxuXHRjb25zdCB0aXRsZSA9IGAke3NvcnRuYW1lfSAobmV3ICR7Y3Rvci5uYW1lfSgke259KSwgJHtjb21wYXJlbmFtZX0pYCA7XG5cblx0X3Rlc3QoIHRpdGxlLCB0ID0+IHtcblxuXHRcdC8vIFNFVFVQIEFSUkFZXG5cdFx0Y29uc3QgYSA9IG5ldyBjdG9yKG4pO1xuXHRcdGFycmF5LmlvdGEoIGEsIDAsIG4sIDAgKTtcblxuXHRcdC8vIFNPUlQgQVJSQVlcblx0XHRyYW5kb20uc2h1ZmZsZSggYSwgMCwgbiApO1xuXHRcdG1ldGhvZCggY29tcGFyZSwgYSwgMCwgbiApO1xuXG5cdFx0Ly8gVEVTVCBQUkVESUNBVEVcblx0XHR0LmlzKCBzb3J0Lmlzc29ydGVkKCBjb21wYXJlICwgYSAsIDAgLCBuICkgLCBuICwgXCJjaGVjayBzb3J0ZWRcIiApIDtcblx0XHR0LmlzKCBhLmxlbmd0aCwgbiwgXCJjaGVjayBsZW5ndGggYVwiICk7XG5cblx0fSApO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0ICggX3Rlc3QgLCBhbGdvcml0aG1zICkge1xuXG5pdGVydG9vbHMuZXhoYXVzdCggaXRlcnRvb2xzLm1hcChcbmZ1bmN0aW9uICggYXJncyApIHtcblxuXHRmdW5jdG9vbHMuc3RhciggZnVuY3Rpb24gKCBzb3J0bmFtZSwgc29ydCwgY29tcGFyZW5hbWUsIGNvbXBhcmUsIHNpemUsIHR5cGUgKSB7XG5cblx0XHRpZiAoIHR5cGUuQllURVNfUEVSX0VMRU1FTlQgJiYgc2l6ZSA+IE1hdGgucG93KCAyLCB0eXBlLkJZVEVTX1BFUl9FTEVNRU5UICogOCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNoZWNrKCBfdGVzdCAsIHNvcnRuYW1lLCBzb3J0LCB0eXBlLCBzaXplLCBjb21wYXJlbmFtZSwgY29tcGFyZSApO1xuXG5cdH0sIGl0ZXJ0b29scy5saXN0KCBpdGVydG9vbHMuY2hhaW4oIGFyZ3MgKSApICkgO1xuXG59ICxcblxuXG5cbml0ZXJ0b29scy5wcm9kdWN0KCBbIGFsZ29yaXRobXMgLFxuXG5bXG5cdFsgXCJpbmNyZWFzaW5nXCIsIGNvbXBhcmUuaW5jcmVhc2luZyBdLFxuXHRbIFwiZGVjcmVhc2luZ1wiLCBjb21wYXJlLmRlY3JlYXNpbmcgXVxuXSxcblxuW1swXSwgWzFdLCBbMl0sIFsxMF0sIFs2M10sIFs2NF0sIFs2NV1dLFxuXG5bXG5cdFsgQXJyYXkgXSxcblx0WyBJbnQ4QXJyYXkgXSxcblx0WyBVaW50OEFycmF5IF0sXG5cdFsgSW50MTZBcnJheSBdLFxuXHRbIFVpbnQxNkFycmF5IF0sXG5cdFsgSW50MzJBcnJheSBdLFxuXHRbIFVpbnQzMkFycmF5IF0sXG5cdFsgRmxvYXQzMkFycmF5IF0sXG5cdFsgRmxvYXQ2NEFycmF5IF1cbl1cblxuXSwgMSApICkgKTtcblxufSA7XG5cbiJdfQ==