"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.test = test;

var _jsSort = require("@aureooms/js-sort");

var _jsArray = require("@aureooms/js-array");

var _jsRandom = require("@aureooms/js-random");

var _jsCompare = require("@aureooms/js-compare");

var _jsCompare2 = _interopRequireDefault(_jsCompare);

var _jsItertools = require("@aureooms/js-itertools");

var itertools = _interopRequireWildcard(_jsItertools);

var _jsFunctools = require("@aureooms/js-functools");

var _jsFunctools2 = _interopRequireDefault(_jsFunctools);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function check(_test, sortname, method, ctor, n, comparename, compare) {

	var title = sortname + " (new " + ctor.name + "(" + n + "), " + comparename + ")";

	_test(title, function (t) {

		// SETUP ARRAY
		var a = new ctor(n);
		(0, _jsArray.iota)(a, 0, n, 0);

		// SORT ARRAY
		(0, _jsRandom.shuffle)(a, 0, n);
		method(compare, a, 0, n);

		// TEST PREDICATE
		t.is((0, _jsSort.issorted)(compare, a, 0, n), n, "check sorted");
		t.is(a.length, n, "check length a");
	});
}

function test(_test, algorithms) {

	itertools.exhaust(itertools.map(function (args) {

		_jsFunctools2.default.star(function (sortname, sort, comparename, compare, size, type) {

			if (type.BYTES_PER_ELEMENT && size > Math.pow(2, type.BYTES_PER_ELEMENT * 8)) {
				return;
			}

			check(_test, sortname, sort, type, size, comparename, compare);
		}, itertools.list(itertools.chain(args)));
	}, itertools.product([algorithms, [["increasing", _jsCompare2.default.increasing], ["decreasing", _jsCompare2.default.decreasing]], [[0], [1], [2], [10], [63], [64], [65]], [[Array], [Int8Array], [Uint8Array], [Int16Array], [Uint16Array], [Int32Array], [Uint32Array], [Float32Array], [Float64Array]]], 1)));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0LmpzIl0sIm5hbWVzIjpbInRlc3QiLCJpdGVydG9vbHMiLCJjaGVjayIsIl90ZXN0Iiwic29ydG5hbWUiLCJtZXRob2QiLCJjdG9yIiwibiIsImNvbXBhcmVuYW1lIiwiY29tcGFyZSIsInRpdGxlIiwibmFtZSIsImEiLCJ0IiwiaXMiLCJsZW5ndGgiLCJhbGdvcml0aG1zIiwiZXhoYXVzdCIsIm1hcCIsImFyZ3MiLCJzdGFyIiwic29ydCIsInNpemUiLCJ0eXBlIiwiQllURVNfUEVSX0VMRU1FTlQiLCJNYXRoIiwicG93IiwibGlzdCIsImNoYWluIiwicHJvZHVjdCIsImluY3JlYXNpbmciLCJkZWNyZWFzaW5nIiwiQXJyYXkiLCJJbnQ4QXJyYXkiLCJVaW50OEFycmF5IiwiSW50MTZBcnJheSIsIlVpbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5Il0sIm1hcHBpbmdzIjoiOzs7OztRQThCZ0JBLEksR0FBQUEsSTs7QUE3QmhCOztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7O0lBQVlDLFM7O0FBQ1o7Ozs7Ozs7O0FBRUEsU0FBU0MsS0FBVCxDQUFpQkMsS0FBakIsRUFBeUJDLFFBQXpCLEVBQW9DQyxNQUFwQyxFQUE2Q0MsSUFBN0MsRUFBb0RDLENBQXBELEVBQXdEQyxXQUF4RCxFQUFzRUMsT0FBdEUsRUFBZ0Y7O0FBRS9FLEtBQU1DLFFBQVdOLFFBQVgsY0FBNEJFLEtBQUtLLElBQWpDLFNBQXlDSixDQUF6QyxXQUFnREMsV0FBaEQsTUFBTjs7QUFFQUwsT0FBT08sS0FBUCxFQUFjLGFBQUs7O0FBRWxCO0FBQ0EsTUFBTUUsSUFBSSxJQUFJTixJQUFKLENBQVNDLENBQVQsQ0FBVjtBQUNBLHFCQUFNSyxDQUFOLEVBQVMsQ0FBVCxFQUFZTCxDQUFaLEVBQWUsQ0FBZjs7QUFFQTtBQUNBLHlCQUFTSyxDQUFULEVBQVksQ0FBWixFQUFlTCxDQUFmO0FBQ0FGLFNBQVFJLE9BQVIsRUFBaUJHLENBQWpCLEVBQW9CLENBQXBCLEVBQXVCTCxDQUF2Qjs7QUFFQTtBQUNBTSxJQUFFQyxFQUFGLENBQU0sc0JBQVVMLE9BQVYsRUFBb0JHLENBQXBCLEVBQXdCLENBQXhCLEVBQTRCTCxDQUE1QixDQUFOLEVBQXdDQSxDQUF4QyxFQUE0QyxjQUE1QztBQUNBTSxJQUFFQyxFQUFGLENBQU1GLEVBQUVHLE1BQVIsRUFBZ0JSLENBQWhCLEVBQW1CLGdCQUFuQjtBQUVBLEVBZEQ7QUFnQkE7O0FBRU0sU0FBU1AsSUFBVCxDQUFnQkcsS0FBaEIsRUFBd0JhLFVBQXhCLEVBQXFDOztBQUU1Q2YsV0FBVWdCLE9BQVYsQ0FBbUJoQixVQUFVaUIsR0FBVixDQUNuQixVQUFXQyxJQUFYLEVBQWtCOztBQUVqQix3QkFBVUMsSUFBVixDQUFnQixVQUFXaEIsUUFBWCxFQUFxQmlCLElBQXJCLEVBQTJCYixXQUEzQixFQUF3Q0MsT0FBeEMsRUFBaURhLElBQWpELEVBQXVEQyxJQUF2RCxFQUE4RDs7QUFFN0UsT0FBS0EsS0FBS0MsaUJBQUwsSUFBMEJGLE9BQU9HLEtBQUtDLEdBQUwsQ0FBVSxDQUFWLEVBQWFILEtBQUtDLGlCQUFMLEdBQXlCLENBQXRDLENBQXRDLEVBQWtGO0FBQ2pGO0FBQ0E7O0FBRUR0QixTQUFPQyxLQUFQLEVBQWVDLFFBQWYsRUFBeUJpQixJQUF6QixFQUErQkUsSUFBL0IsRUFBcUNELElBQXJDLEVBQTJDZCxXQUEzQyxFQUF3REMsT0FBeEQ7QUFFQSxHQVJELEVBUUdSLFVBQVUwQixJQUFWLENBQWdCMUIsVUFBVTJCLEtBQVYsQ0FBaUJULElBQWpCLENBQWhCLENBUkg7QUFVQSxFQWJrQixFQWlCbkJsQixVQUFVNEIsT0FBVixDQUFtQixDQUFFYixVQUFGLEVBRW5CLENBQ0MsQ0FBRSxZQUFGLEVBQWdCLG9CQUFRYyxVQUF4QixDQURELEVBRUMsQ0FBRSxZQUFGLEVBQWdCLG9CQUFRQyxVQUF4QixDQUZELENBRm1CLEVBT25CLENBQUMsQ0FBQyxDQUFELENBQUQsRUFBTSxDQUFDLENBQUQsQ0FBTixFQUFXLENBQUMsQ0FBRCxDQUFYLEVBQWdCLENBQUMsRUFBRCxDQUFoQixFQUFzQixDQUFDLEVBQUQsQ0FBdEIsRUFBNEIsQ0FBQyxFQUFELENBQTVCLEVBQWtDLENBQUMsRUFBRCxDQUFsQyxDQVBtQixFQVNuQixDQUNDLENBQUVDLEtBQUYsQ0FERCxFQUVDLENBQUVDLFNBQUYsQ0FGRCxFQUdDLENBQUVDLFVBQUYsQ0FIRCxFQUlDLENBQUVDLFVBQUYsQ0FKRCxFQUtDLENBQUVDLFdBQUYsQ0FMRCxFQU1DLENBQUVDLFVBQUYsQ0FORCxFQU9DLENBQUVDLFdBQUYsQ0FQRCxFQVFDLENBQUVDLFlBQUYsQ0FSRCxFQVNDLENBQUVDLFlBQUYsQ0FURCxDQVRtQixDQUFuQixFQXFCRyxDQXJCSCxDQWpCbUIsQ0FBbkI7QUF3Q0MsQ0FBQyIsImZpbGUiOiJ0ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBpc3NvcnRlZCB9IGZyb20gXCJAYXVyZW9vbXMvanMtc29ydFwiIDtcbmltcG9ydCB7IGlvdGEgfSBmcm9tIFwiQGF1cmVvb21zL2pzLWFycmF5XCIgO1xuaW1wb3J0IHsgc2h1ZmZsZSB9IGZyb20gXCJAYXVyZW9vbXMvanMtcmFuZG9tXCIgO1xuaW1wb3J0IGNvbXBhcmUgZnJvbSBcIkBhdXJlb29tcy9qcy1jb21wYXJlXCIgO1xuaW1wb3J0ICogYXMgaXRlcnRvb2xzIGZyb20gXCJAYXVyZW9vbXMvanMtaXRlcnRvb2xzXCIgO1xuaW1wb3J0IGZ1bmN0b29scyBmcm9tIFwiQGF1cmVvb21zL2pzLWZ1bmN0b29sc1wiIDtcblxuZnVuY3Rpb24gY2hlY2sgKCBfdGVzdCAsIHNvcnRuYW1lICwgbWV0aG9kICwgY3RvciAsIG4gLCBjb21wYXJlbmFtZSAsIGNvbXBhcmUgKSB7XG5cblx0Y29uc3QgdGl0bGUgPSBgJHtzb3J0bmFtZX0gKG5ldyAke2N0b3IubmFtZX0oJHtufSksICR7Y29tcGFyZW5hbWV9KWAgO1xuXG5cdF90ZXN0KCB0aXRsZSwgdCA9PiB7XG5cblx0XHQvLyBTRVRVUCBBUlJBWVxuXHRcdGNvbnN0IGEgPSBuZXcgY3RvcihuKTtcblx0XHRpb3RhKCBhLCAwLCBuLCAwICk7XG5cblx0XHQvLyBTT1JUIEFSUkFZXG5cdFx0c2h1ZmZsZSggYSwgMCwgbiApO1xuXHRcdG1ldGhvZCggY29tcGFyZSwgYSwgMCwgbiApO1xuXG5cdFx0Ly8gVEVTVCBQUkVESUNBVEVcblx0XHR0LmlzKCBpc3NvcnRlZCggY29tcGFyZSAsIGEgLCAwICwgbiApICwgbiAsIFwiY2hlY2sgc29ydGVkXCIgKSA7XG5cdFx0dC5pcyggYS5sZW5ndGgsIG4sIFwiY2hlY2sgbGVuZ3RoIGFcIiApO1xuXG5cdH0gKTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVzdCAoIF90ZXN0ICwgYWxnb3JpdGhtcyApIHtcblxuaXRlcnRvb2xzLmV4aGF1c3QoIGl0ZXJ0b29scy5tYXAoXG5mdW5jdGlvbiAoIGFyZ3MgKSB7XG5cblx0ZnVuY3Rvb2xzLnN0YXIoIGZ1bmN0aW9uICggc29ydG5hbWUsIHNvcnQsIGNvbXBhcmVuYW1lLCBjb21wYXJlLCBzaXplLCB0eXBlICkge1xuXG5cdFx0aWYgKCB0eXBlLkJZVEVTX1BFUl9FTEVNRU5UICYmIHNpemUgPiBNYXRoLnBvdyggMiwgdHlwZS5CWVRFU19QRVJfRUxFTUVOVCAqIDggKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjaGVjayggX3Rlc3QgLCBzb3J0bmFtZSwgc29ydCwgdHlwZSwgc2l6ZSwgY29tcGFyZW5hbWUsIGNvbXBhcmUgKTtcblxuXHR9LCBpdGVydG9vbHMubGlzdCggaXRlcnRvb2xzLmNoYWluKCBhcmdzICkgKSApIDtcblxufSAsXG5cblxuXG5pdGVydG9vbHMucHJvZHVjdCggWyBhbGdvcml0aG1zICxcblxuW1xuXHRbIFwiaW5jcmVhc2luZ1wiLCBjb21wYXJlLmluY3JlYXNpbmcgXSxcblx0WyBcImRlY3JlYXNpbmdcIiwgY29tcGFyZS5kZWNyZWFzaW5nIF1cbl0sXG5cbltbMF0sIFsxXSwgWzJdLCBbMTBdLCBbNjNdLCBbNjRdLCBbNjVdXSxcblxuW1xuXHRbIEFycmF5IF0sXG5cdFsgSW50OEFycmF5IF0sXG5cdFsgVWludDhBcnJheSBdLFxuXHRbIEludDE2QXJyYXkgXSxcblx0WyBVaW50MTZBcnJheSBdLFxuXHRbIEludDMyQXJyYXkgXSxcblx0WyBVaW50MzJBcnJheSBdLFxuXHRbIEZsb2F0MzJBcnJheSBdLFxuXHRbIEZsb2F0NjRBcnJheSBdXG5dXG5cbl0sIDEgKSApICk7XG5cbn0gO1xuXG4iXX0=